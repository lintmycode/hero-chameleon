{"mappings":"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","sources":["hero-chameleon.js"],"sourcesContent":["import ColorThief from 'colorthief'\n\nexport default class Chameleon {\n  /**\n   * \n   * @param {HTMLElement} section \n   * @param {HTMLElement} image optional, if omitted will try to find a \n   * background-image on section\n   */\n  constructor (section, image = null) {\n\n    if (image) {\n      this.image = image\n      this.bg = false\n    } else {\n      this.image = new Image()\n      this.image.src = section.style.backgroundImage.slice(4, -1).replace(/[\"']/g, \"\")\n      this.bg = true\n    }\n\n    this.section = section\n    this.colorThief = new ColorThief()\n    this.imageBgColor = null\n    this.imagePalette = null\n    \n    this.initComplete = new Promise((resolve, reject) => {  \n      const process = (img) => {\n        // get image average color\n        this.imageBgColor = ((rgb, percent) => {\n          let [r, g, b] = rgb\n          r = Math.min(255, r + (r * percent / 100))\n          g = Math.min(255, g + (g * percent / 100))\n          b = Math.min(255, b + (b * percent / 100))\n          return [r, g, b]\n        })(this.colorThief.getColor(img), 10)\n        \n        // get image color palette sorted by contrast ratio\n        this.imagePalette = ((palette, bg) => {\n          const sortColorsByContrast = (colors, bg) => \n            colors\n              .map(rgb => ({rgb, ratio: this.getContrastRatio(rgb, bg).toFixed(2)}))\n              .sort((a, b) => b.ratio - a.ratio)\n\n          return sortColorsByContrast(palette, bg)\n        })(this.colorThief.getPalette(img), this.imageBgColor)\n\n        // promise resolution\n        resolve()\n      }\n    \n      if (this.image.complete) {\n        process(this.image)\n      } else {\n        this.image.onload = () => process(this.image)\n      }\n    })\n  }\n\n  /**\n   * @returns bg color rgb\n   */\n  getBgColor = () => this.initComplete.then(() => this.imageBgColor)\n  \n  /**\n   * @returns palette [{rbg, constrast ratio}, ...]\n   */\n  getPalette = () => this.initComplete.then(() => this.imagePalette)\n\n  /**\n   * apply contrast to the element\n   */\n  applyContrast = () => {\n    const getClass = (rgb) => {\n      const luminance = rgb.reduce((acc, val) => {\n        val /= 255 // normalize RGB values to 0-1\n        val = val < 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n        return acc + val;\n      }, 0) / 3\n    \n      return luminance > 0.5 ? 'light' : 'dark'\n    }\n\n    this.initComplete.then(() => {\n      if (this.bg) {\n        const overlay = document.createElement(\"div\")\n        overlay.style.cssText = `position: absolute; left: 0; top: 0; right: 0; bottom: 0; \n          background-color: rgb(${this.imageBgColor.join(',')}, .7); z-index: -1; backdrop-filter: blur(3px);`\n        overlay.className = \"chameleon-overlay\"\n        this.section.appendChild(overlay)\n        this.section.style.position = \"relative\"\n      } else {\n        this.section.style.backgroundColor = `rgb(${this.imageBgColor.join(',')})`\n      }\n      this.section.classList.add(`chameleon-${getClass(this.imageBgColor)}`)\n    })\n  }\n\n  /**\n   * apply the palette to common elements\n   */\n  applyPalette = () => {\n    this.initComplete.then(() => {\n      this.section.querySelectorAll(\"h1, h2, h3\").forEach(header => header.style.color = `rgb(${this.imagePalette[1].rgb.join(',')})`)\n      this.section.querySelectorAll(\"p\").forEach(header => header.style.color = `rgb(${this.imagePalette[0].rgb.join(',')})`)\n      this.section.querySelectorAll(\"a\").forEach(header => header.style.color = `rgb(${this.imagePalette[2].rgb.join(',')})`)\n    })\n  }\n\n  /**\n   * get the color luminance\n   * @param {array} rgb\n   */\n  getLuminance = (rgb) => {\n    const a = rgb.map(v => {\n      v /= 255\n      return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4)\n    })\n    \n    return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722\n  }\n\n  /**\n   * get contrast ratio\n   * @param {array} rgb1\n   * @param {array} rgb2\n   */\n  getContrastRatio = (rgb1, rgb2) => {\n    const ratio = this.getLuminance(rgb1) + 0.05 / this.getLuminance(rgb2) + 0.05\n    return Math.max(ratio, 1 / ratio)\n  }\n\n  /**\n   * inject the palatte as colored divs into the section\n   * @param {el} element to inject the palette, defaults to the section\n   */\n  injectPalette = (el = null) => \n    this.initComplete.then(() => {\n      const palette = document.createElement('div')\n\n      this.imagePalette.forEach(color => {\n        const item = document.createElement('span')\n        item.innerHTML = `rgb(${color.rgb.join(',')})<br>ratio: ${color.ratio}`\n        item.style.cssText = `width: 150px; display: inline-flex;\n          padding: .5rem; align-items: center;\n          background-color: rgb(${color.rgb.join(',')});\n          color: ${this.getLuminance(color.rgb) > 0.4 ? '#222' : '#fff'};`\n        palette.appendChild(item)\n      })\n      \n      const label = document.createElement('label')\n      label.style.cssText = `color: #fff; background-color: #000; padding: .5rem; \n        display: inline-block;`\n      label.innerText = \"Chameleon Palette: \"\n      const container = document.createElement('div')\n      container.className = \".chamaleon-palette\"\n      container.style.cssText = `margin: 1rem 0; font-size:14px; font-family: monospace;`\n      container.append(label)\n      container.append(palette)\n\n      if (el) this.section.querySelector(el).appendChild(container)\n      else this.section.appendChild(container)\n    })\n    \n}\n"],"names":[],"version":3,"file":"hero-chameleon.cjs.js.map"}